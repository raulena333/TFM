import numpy as np
import matplotlib.pyplot as plt


# Assuming you have this mapping
element_names = ['H', 'C', 'N', 'O', 'Ca', 'P', 'Na', 'Mg', 'S', 'Cl', 'K', 'Fe', 'I', 'F', 'Sb', 'Sn']

# Tissues name
tissues = [
    "AdiposeTissue", "Blood", "Brain", "Breast", "CellNucleus", "EyeLens",
    "GITract", "Heart", "Kidney", "Liver", "Lung(deflated)",
    "Lymph", "Muscle", "Ovary", "Pancreas", "Cartilage", "RedMarrow",
    "Spongiosa", "YellowMarrow", "Skin", "Spleen", "Testis", "Thyroid",
    "SkeletonCortical", "SkeletonCranium", "SkeletonFemur", "SkeletonHumerus",
    "SkeletonMandible", "SkeletonRibs(2nd,6th)", "SkeletonRibs(10th)", "SkeletonSacrum",
    "SkeletonSpongiosa", "SkeletonVertebralColumn(C4)", "SkeletonVertebralColumn(D6,L3)",
    "A150", "Acrylic", "Alderson-lung", "Alderson-muscleA", "Alderson-muscleB", "AP6",
    #"AP/L2", "AP/SF1", "B100", 
    "B110", "BR12", "Ethoxyethanol",
    "EVA-28", "FrigerioGel", 
    # "FrigerioLiquid", 
    "GlycerolTrioleate", "GoodmanLiquid", 
    # "GriffithBreast", "GriffithLung", "GriffithMuscle", 
    "M3", "Magnesium", "Mylar/Melinex",
    "Nylon-6", "ParaffinWax", "PlasterOfParis", "Polyethylene", "Polystyrene", "PTFE",
    "PVC", "RF-1", "RicePowder", "RM-1", 
    # "RM/G1", "RM/L3", 
    # "RM/SR4", 
    "RossiGel", "RossiLiquid", "RW-1", "SB5", "WittLiquid", "WT1", "Water"
]

elements = np.array([
    [11.4, 59.8, 0.7, 27.8, 0.0, 0.0, 0.1, 0.0, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.2, 11.0, 3.3, 74.5, 0.0, 0.1, 0.1, 0.0, 0.2, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],
    [10.7, 14.5, 2.2, 71.2, 0.0, 0.4, 0.2, 0.0, 0.2, 0.3, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.6, 33.2, 3.0, 52.7, 0.0, 0.1, 0.1, 0.0, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.6, 9.0, 3.2, 74.2, 0.0, 2.6, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [9.6, 19.5, 5.7, 64.6, 0.0, 0.1, 0.1, 0.0, 0.3, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.6, 11.5, 2.2, 75.1, 0.0, 0.1, 0.1, 0.0, 0.1, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.3, 12.1, 3.2, 73.4, 0.0, 0.1, 0.1, 0.0, 0.2, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],
    [10.3, 13.2, 3.0, 72.4, 0.1, 0.2, 0.2, 0.0, 0.2, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0], 
    [10.2, 13.9, 3.0, 71.6, 0.0, 0.3, 0.2, 0.0, 0.3, 0.2, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.3, 10.5, 3.1, 74.9, 0.0, 0.2, 0.2, 0.0, 0.3, 0.3, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.8, 4.1, 1.1, 83.2, 0.0, 0.0, 0.3, 0.0, 0.1, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.2, 14.3, 3.4, 71.0, 0.0, 0.2, 0.1, 0.0, 0.3, 0.1, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.5, 9.3, 2.4, 76.8, 0.0, 0.2, 0.2, 0.0, 0.2, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.6, 16.9, 2.2, 69.4, 0.0, 0.2, 0.2, 0.0, 0.1, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0],
    [9.6, 9.9, 2.2, 74.4, 0.0, 2.2, 0.5, 0.0, 0.9, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.5, 41.4, 3.4, 43.9, 0.0, 0.1, 0.0, 0.0, 0.2, 0.2, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],
    [8.5, 40.4, 2.8, 36.7, 7.4, 3.4, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0],
    [11.5, 64.4, 0.7, 23.1, 0.0, 0.0, 0.1, 0, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.0, 20.4, 4.2, 64.5, 0.0, 0.1, 0.2, 0.0, 0.2, 0.3, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.3, 11.3, 3.2, 74.1, 0.0, 0.3, 0.1, 0.0, 0.2, 0.2, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.6, 9.9, 2.0, 76.6, 0.0, 0.1, 0.2, 0.0, 0.2, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0], 
    [10.4, 11.9, 2.4, 74.5, 0.0, 0.1, 0.2, 0.0, 0.1, 0.2, 0.1, 0.0, 0.1, 0.0, 0.0, 0.0],
    [3.4, 15.5, 4.2, 43.5, 22.5, 10.3, 0.1, 0.2, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],    
    [5.0, 21.2, 4.0, 43.5, 17.6, 8.1, 0.1, 0.2, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],   
    [7.0, 34.5, 2.8, 36.8, 12.9, 5.5, 0.1, 0.1, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [6.0, 31.4, 3.1, 36.9, 15.2, 7.0, 0.1, 0.1, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],    
    [4.6, 19.9, 4.1, 43.5, 18.7, 8.6, 0.1, 0.2, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [6.4, 26.3, 3.9, 43.6, 13.1, 6.0, 0.1, 0.1, 0.3, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],
    [5.6, 23.5, 4.0, 43.4, 15.6, 7.2, 0.1, 0.1, 0.3, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0], 
    [7.4, 30.2, 3.7, 43.8, 9.8, 4.5, 0.0, 0.1, 0.2, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0], 
    [8.5, 40.4, 2.8, 36.7, 7.4, 3.4, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0],
    [6.3, 26.1, 3.9, 43.5, 13.3, 6.1, 0.1, 0.1, 0.3, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0],
    [7.0, 28.7, 3.8, 43.7, 11.1, 5.1, 0.0, 0.1, 0.2, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0], 
    [10.1, 77.7, 3.5, 5.2, 1.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7, 0.0, 0.0],
    [8.0, 60.0, 0.0, 32.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [5.7, 74.0, 2.0, 18.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0],
    [8.9, 66.8, 3.1, 21.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0],
    [8.8, 64.4, 4.1, 20.4, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0],
    [8.4, 69.1, 2.4, 16.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 3.1, 0.0, 0.0],
    #[12.1, 29.3, 0.8, 57.4, 0.002, 0.2, 0.1, 0.002, 0.0, 0.1, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0],
    #[12.0, 75.5, 0.8, 11.1, 0.02, 0.01, 0.1, 0.0, 0.1, 0.4, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0],
    # [6.6, 53.7, 2.2, 3.2, 17.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.7, 0.0, 0.0],
    [3.7, 37.1, 3.2, 4.8, 26.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.9, 0.0, 0.0],
    [8.7, 69.9, 2.4, 17.9, 1.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [11.2, 53.3, 0.0, 35.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [12.3, 77.3, 0.0, 10.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,],
    [10.0, 12.0, 4.0, 73.3, 0.0, 0.0, 0.4, 0.0, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    # [10.2, 12.3, 3.5, 72.9, 0.01, 0.2, 0.1, 0.02, 0.3, 0.1, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0],
    [11.8, 77.3, 0.0, 10.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [10.2, 12.0, 3.6, 74.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    # [9.4, 61.9, 3.6, 24.5, 0.6, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01],
    # [8.0, 60.8, 4.2, 24.8, 2.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02],
    # [9.0, 60.2, 2.8, 26.6, 1.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01],
    [11.4, 65.6, 0.0, 9.2, 0.3, 0.0, 0.0, 13.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [4.2, 62.5, 0.0, 33.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [9.8, 63.7, 12.4, 14.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [15.0, 85.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.3, 0.0, 0.0, 55.8, 23.3, 0.0, 0.0, 0.0, 18.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [14.4, 85.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [7.7, 92.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.0, 24.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 76.0, 0.0, 0.0],
    [4.8, 38.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 56.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [14.1, 84.1, 0.0, 0.9, 0.6, 0.0, 0.0, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [6.2, 44.4, 0.0, 49.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [12.2, 73.4, 0.0, 6.4, 2.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    # [10.2, 9.4, 2.4, 77.4, 0.0, 0.03, 0.1, 0.0, 0.1, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0],
    # [10.2, 12.8, 2.2, 74.1, 0.0, 0.03, 0.1, 0.0, 0.2, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0],
    # [10.1, 73.6, 2.2, 13.7, 0.0, 0.03, 0.01, 0.003, 0.1, 0.1, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0],
    [9.8, 15.7, 3.6, 70.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [9.8, 15.6, 3.6, 71.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [13.2, 79.4, 0.0, 3.8, 2.7, 0.0, 0.0, 0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.6, 30.6, 1.0, 38.9, 26.8, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [4.7, 0.0, 0.0, 56.8, 0.0, 10.9, 0.0, 0.0, 0.0, 0.0, 27.6, 0.0, 0.0, 0.0, 0.0, 0.0],
    [8.1, 67.2, 2.4, 19.9, 2.3, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [11.19, 0.0, 0.0, 88.81, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
])

# Convert to percentage
elements = np.round(elements / 100.0, 5) 

# Density (g/cm^3)
density = np.array([
    0.95, 1.06, 1.04, 1.02, 1.00, 1.07, 1.03, 1.06, 1.05,
    1.06, 1.05, 1.03, 1.05, 1.05, 1.04, 1.1, 1.03, 1.18, 
    0.98, 1.09, 1.06, 1.04, 1.05, 1.92, 1.61, 1.33, 1.46, 
    1.68, 1.41, 1.52, 1.29, 1.18, 1.42, 1.33, 1.12, 1.17, 
    0.32, 1.00, 1.00, 0.91, 
    # 0.92, 0.92, 1.45, 
    1.79, 0.97, 
    0.93, 0.95, 1.12, 
    # 1.08, 
    0.92, 1.07, 
    # 1.10, 0.26, 1.12, 
    1.05, 1.74, 1.40, 1.13, 0.93, 2.32, 0.92, 1.05, 2.10, 
    1.35, 0.93, 0.84, 1.03, 
    # 1.07, 1.04, 1.03, 
    1.10, 1.11, 
    0.97, 1.87, 1.72, 1.02, 1.0
])

hounsfieldUnits = np.array([
    930, 1055, 1037, 1003, 1003, 1050, 1023, 1055, 1043,
    1053, 1044,1028, 1042, 1045, 1032, 1098, 1014, 1260, 
    958, 1075, 1054, 1032, 1040, 2376, 1903, 1499, 1683, 
    2006, 1595, 1763, 1413, 1260, 1609, 1477, 1098, 1114, 
    314, 982, 995, 875, 
    # 917, 901, 1665, 
    2203, 936, 910, 
    929, 1106, 
    # 1073, 
    896, 1056, 
    # 1068, 255, 1095, 
    1050, 1859, 
    1291, 1086, 925, 3022, 911, 983, 1869, 1717, 926, 797,  
    1041, 
    # 1062, 1031, 994, 
    1081, 1090, 986, 2313, 2144,
    996, 1000
])

# Sort HU and density arrays together
sortedIndices = np.argsort(hounsfieldUnits)
HUsorted = hounsfieldUnits[sortedIndices]
densitySorted = density[sortedIndices]
compositionSorted = elements[sortedIndices]

# Interpolation function
def interpolateVoxelMaterialWithDensity(HUvalue, HUtable, densityTable, compositionTable):
    idx = np.searchsorted(HUtable, HUvalue) - 1
    idx = np.clip(idx, 0, len(HUtable) - 2)

    hu1, hu2 = HUtable[idx], HUtable[idx + 1]
    dens1, dens2 = densityTable[idx], densityTable[idx + 1]
    comp1, comp2 = compositionTable[idx], compositionTable[idx + 1]

    alpha = (HUvalue - hu1) / (hu2 - hu1)

    interpDensity = dens1 * (1 - alpha) + dens2 * alpha

    # Use mass-weighted interpolation for composition
    mass1 = comp1 * dens1
    mass2 = comp2 * dens2
    interpMass = mass1 * (1 - alpha) + mass2 * alpha

    # Normalize back to get final composition
    interpComp = interpMass / interpDensity

    # Safety normalization (optional)
    interpComp = np.clip(interpComp, 0, 1)
    interpComp /= interpComp.sum()

    return interpDensity, interpComp


# Interpolate from HU = 500 to 2500 in steps of 5
HUvalues = np.arange(500, 2500 + 1, 40)
interpolatedDensities = []
interpolatedCompositions = []

for hu in HUvalues:
    dens, comp = interpolateVoxelMaterialWithDensity(hu, HUsorted, densitySorted, compositionSorted)
    interpolatedDensities.append(dens)
    interpolatedCompositions.append(comp)

interpolatedDensities = np.array(interpolatedDensities)
interpolatedCompositions = np.array(interpolatedCompositions)
print(interpolatedDensities.shape) 
print(interpolatedCompositions.shape)

properties = np.column_stack((interpolatedCompositions, interpolatedDensities, HUvalues))

plt.figure(figsize=(8, 5))
plt.plot(HUvalues, interpolatedDensities, marker='o')
plt.xlabel("HU")
plt.ylabel("Interpolated Density (g/cm³)")
plt.title("Interpolated Density vs HU")
plt.grid(True)
plt.tight_layout()
plt.savefig("InterpolatedDensity.png")
plt.close()

# Save interpolated components to a npy file
np.save("InterpolatedCompositions.npy", properties)
print("Interpolated compositions saved to InterpolatedCompositions.npy"
      " with shape:", properties.shape)

# Save in a txt file for TOPAS
with open("InterpolationData.txt", "w") as f:
    for i in range(len(HUvalues)):
        hu = HUvalues[i]
        dens = interpolatedDensities[i]
        comp = interpolatedCompositions[i]
        
        # Format as HU (integer), density, followed by a space
        # The space at the end of the f-string ensures a separation
        # from the first element in the composition list.
        line = f'{hu} {dens:.5f} '
        line += " ".join(f'{c:.5f}' for c in comp)
        line += '\n'
        
        f.write(line)

print(f'Interpolation data saved to InterpolationData.txt with {len(HUvalues)} entries for C++ TOPAS.')